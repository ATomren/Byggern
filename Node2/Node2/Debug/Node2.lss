
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c64  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080c64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00081098  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  0008111c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  0008151c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005dda  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001024  00000000  00000000  00026290  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001d0  00000000  00000000  000272b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000160  00000000  00000000  00027484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012d2a  00000000  00000000  000275e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004800  00000000  00000000  0003a30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005537d  00000000  00000000  0003eb0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000053c  00000000  00000000  00093e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000e77  00000000  00000000  000943c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 89 03 08 00 85 03 08 00 85 03 08 00     ... ............
   80010:	85 03 08 00 85 03 08 00 85 03 08 00 00 00 00 00     ................
	...
   8002c:	85 03 08 00 85 03 08 00 00 00 00 00 85 03 08 00     ................
   8003c:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   8004c:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   8005c:	85 03 08 00 9d 09 08 00 85 03 08 00 00 00 00 00     ................
   8006c:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
	...
   80084:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   80094:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   800a4:	00 00 00 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   800b4:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   800c4:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   800d4:	85 03 08 00 85 03 08 00 85 03 08 00 85 03 08 00     ................
   800e4:	85 03 08 00 85 03 08 00 15 03 08 00 85 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080c64 	.word	0x00080c64

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080c64 	.word	0x00080c64
   80154:	20000438 	.word	0x20000438
   80158:	00080c64 	.word	0x00080c64
   8015c:	00000000 	.word	0x00000000

00080160 <ADC_init>:


void ADC_init(void){
	//ADC->ADC_WPMR = 0x41444301;
	
	ADC->ADC_MR = ADC_MR_FREERUN;
   80160:	4b08      	ldr	r3, [pc, #32]	; (80184 <ADC_init+0x24>)
   80162:	2280      	movs	r2, #128	; 0x80
   80164:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER = ADC_CHER_CH0;
   80166:	2201      	movs	r2, #1
   80168:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_ADC << PMC_PCR_PID_Pos);
   8016a:	4a07      	ldr	r2, [pc, #28]	; (80188 <ADC_init+0x28>)
   8016c:	4907      	ldr	r1, [pc, #28]	; (8018c <ADC_init+0x2c>)
   8016e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_ADC - 32);
   80172:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   80176:	f041 0120 	orr.w	r1, r1, #32
   8017a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	ADC->ADC_CR = ADC_CR_START;
   8017e:	2202      	movs	r2, #2
   80180:	601a      	str	r2, [r3, #0]
   80182:	4770      	bx	lr
   80184:	400c0000 	.word	0x400c0000
   80188:	400e0600 	.word	0x400e0600
   8018c:	10000025 	.word	0x10000025

00080190 <ADC_read>:

	// ADC_COR??!! enable single ended mode
}

uint16_t ADC_read(void){
	return ADC->ADC_CDR[ADC_channel];
   80190:	4b01      	ldr	r3, [pc, #4]	; (80198 <ADC_read+0x8>)
   80192:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
   80194:	b280      	uxth	r0, r0
   80196:	4770      	bx	lr
   80198:	400c0000 	.word	0x400c0000

0008019c <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   8019c:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if((num_rx_mb > 8 )|( num_tx_mb > 8) | (num_rx_mb + num_tx_mb > 8))
   8019e:	1857      	adds	r7, r2, r1
   801a0:	2f08      	cmp	r7, #8
   801a2:	bfd4      	ite	le
   801a4:	2300      	movle	r3, #0
   801a6:	2301      	movgt	r3, #1
   801a8:	2908      	cmp	r1, #8
   801aa:	bf98      	it	ls
   801ac:	2a08      	cmpls	r2, #8
   801ae:	d85c      	bhi.n	8026a <can_init+0xce>
   801b0:	460d      	mov	r5, r1
   801b2:	2b00      	cmp	r3, #0
   801b4:	d159      	bne.n	8026a <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801b6:	4a2e      	ldr	r2, [pc, #184]	; (80270 <can_init+0xd4>)
   801b8:	6813      	ldr	r3, [r2, #0]
   801ba:	f023 0301 	bic.w	r3, r3, #1
   801be:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801c0:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801c2:	4b2c      	ldr	r3, [pc, #176]	; (80274 <can_init+0xd8>)
   801c4:	f44f 7440 	mov.w	r4, #768	; 0x300
   801c8:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801ca:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801cc:	f024 0403 	bic.w	r4, r4, #3
   801d0:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801d2:	2403      	movs	r4, #3
   801d4:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801d6:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801d8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801dc:	4c26      	ldr	r4, [pc, #152]	; (80278 <can_init+0xdc>)
   801de:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801e2:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801e6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ea:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ee:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801f0:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f2:	e019      	b.n	80228 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801f4:	481e      	ldr	r0, [pc, #120]	; (80270 <can_init+0xd4>)
   801f6:	f101 0310 	add.w	r3, r1, #16
   801fa:	015b      	lsls	r3, r3, #5
   801fc:	18c2      	adds	r2, r0, r3
   801fe:	2600      	movs	r6, #0
   80200:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80202:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   80206:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   8020a:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8020e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   80212:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80214:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8021c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80220:	2301      	movs	r3, #1
   80222:	408b      	lsls	r3, r1
   80224:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80226:	3101      	adds	r1, #1
   80228:	42b9      	cmp	r1, r7
   8022a:	dde3      	ble.n	801f4 <can_init+0x58>
   8022c:	2300      	movs	r3, #0
   8022e:	e00d      	b.n	8024c <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80230:	490f      	ldr	r1, [pc, #60]	; (80270 <can_init+0xd4>)
   80232:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80236:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   8023a:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8023e:	f103 0210 	add.w	r2, r3, #16
   80242:	0152      	lsls	r2, r2, #5
   80244:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80248:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8024a:	3301      	adds	r3, #1
   8024c:	42ab      	cmp	r3, r5
   8024e:	dbef      	blt.n	80230 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80250:	4b07      	ldr	r3, [pc, #28]	; (80270 <can_init+0xd4>)
   80252:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80254:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80258:	4a08      	ldr	r2, [pc, #32]	; (8027c <can_init+0xe0>)
   8025a:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   8025c:	681a      	ldr	r2, [r3, #0]
   8025e:	f042 0201 	orr.w	r2, r2, #1
   80262:	601a      	str	r2, [r3, #0]

	return 0;
   80264:	2000      	movs	r0, #0
}
   80266:	bcf0      	pop	{r4, r5, r6, r7}
   80268:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8026a:	2001      	movs	r0, #1
   8026c:	e7fb      	b.n	80266 <can_init+0xca>
   8026e:	bf00      	nop
   80270:	400b4000 	.word	0x400b4000
   80274:	400e0e00 	.word	0x400e0e00
   80278:	1000102b 	.word	0x1000102b
   8027c:	e000e100 	.word	0xe000e100

00080280 <can_init_def_tx_rx_mb>:
uint8_t can_init_def_tx_rx_mb(uint32_t can_br){
   80280:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80282:	2202      	movs	r2, #2
   80284:	2101      	movs	r1, #1
   80286:	4b01      	ldr	r3, [pc, #4]	; (8028c <can_init_def_tx_rx_mb+0xc>)
   80288:	4798      	blx	r3
}
   8028a:	bd08      	pop	{r3, pc}
   8028c:	0008019d 	.word	0x0008019d

00080290 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80290:	014b      	lsls	r3, r1, #5
   80292:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80296:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8029a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8029e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802a2:	d033      	beq.n	8030c <can_receive+0x7c>
{
   802a4:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802a6:	014b      	lsls	r3, r1, #5
   802a8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802ac:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802b0:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802b4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802b8:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802bc:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802c0:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802c2:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802c6:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802ca:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802cc:	2300      	movs	r3, #0
   802ce:	e003      	b.n	802d8 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802d0:	18c6      	adds	r6, r0, r3
   802d2:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   802d4:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802d6:	3301      	adds	r3, #1
   802d8:	42ab      	cmp	r3, r5
   802da:	da05      	bge.n	802e8 <can_receive+0x58>
			if(i < 4)
   802dc:	2b03      	cmp	r3, #3
   802de:	dcf7      	bgt.n	802d0 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802e0:	18c6      	adds	r6, r0, r3
   802e2:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802e4:	0a24      	lsrs	r4, r4, #8
   802e6:	e7f6      	b.n	802d6 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802e8:	4b09      	ldr	r3, [pc, #36]	; (80310 <can_receive+0x80>)
   802ea:	f101 0210 	add.w	r2, r1, #16
   802ee:	0152      	lsls	r2, r2, #5
   802f0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802f4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802f6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802fa:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80302:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80306:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80308:	bc70      	pop	{r4, r5, r6}
   8030a:	4770      	bx	lr
		return 1;
   8030c:	2001      	movs	r0, #1
   8030e:	4770      	bx	lr
   80310:	400b4000 	.word	0x400b4000

00080314 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80314:	b510      	push	{r4, lr}
   80316:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80318:	4b15      	ldr	r3, [pc, #84]	; (80370 <CAN0_Handler+0x5c>)
   8031a:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   8031c:	f014 0f06 	tst.w	r4, #6
   80320:	d019      	beq.n	80356 <CAN0_Handler+0x42>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80322:	f014 0f02 	tst.w	r4, #2
   80326:	d108      	bne.n	8033a <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80328:	f014 0f04 	tst.w	r4, #4
   8032c:	d00a      	beq.n	80344 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   8032e:	2102      	movs	r1, #2
   80330:	a801      	add	r0, sp, #4
   80332:	4b10      	ldr	r3, [pc, #64]	; (80374 <CAN0_Handler+0x60>)
   80334:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80336:	2300      	movs	r3, #0
   80338:	e009      	b.n	8034e <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   8033a:	2101      	movs	r1, #1
   8033c:	a801      	add	r0, sp, #4
   8033e:	4b0d      	ldr	r3, [pc, #52]	; (80374 <CAN0_Handler+0x60>)
   80340:	4798      	blx	r3
   80342:	e7f8      	b.n	80336 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80344:	480c      	ldr	r0, [pc, #48]	; (80378 <CAN0_Handler+0x64>)
   80346:	4b0d      	ldr	r3, [pc, #52]	; (8037c <CAN0_Handler+0x68>)
   80348:	4798      	blx	r3
   8034a:	e7f4      	b.n	80336 <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   8034c:	3301      	adds	r3, #1
   8034e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80352:	4293      	cmp	r3, r2
   80354:	dbfa      	blt.n	8034c <CAN0_Handler+0x38>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80356:	f014 0f01 	tst.w	r4, #1
   8035a:	d002      	beq.n	80362 <CAN0_Handler+0x4e>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8035c:	2201      	movs	r2, #1
   8035e:	4b04      	ldr	r3, [pc, #16]	; (80370 <CAN0_Handler+0x5c>)
   80360:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80362:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80366:	4b06      	ldr	r3, [pc, #24]	; (80380 <CAN0_Handler+0x6c>)
   80368:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8036c:	b004      	add	sp, #16
   8036e:	bd10      	pop	{r4, pc}
   80370:	400b4000 	.word	0x400b4000
   80374:	00080291 	.word	0x00080291
   80378:	00080b74 	.word	0x00080b74
   8037c:	0008081d 	.word	0x0008081d
   80380:	e000e100 	.word	0xe000e100

00080384 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80384:	e7fe      	b.n	80384 <Dummy_Handler>
	...

00080388 <Reset_Handler>:
{
   80388:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8038a:	4b11      	ldr	r3, [pc, #68]	; (803d0 <Reset_Handler+0x48>)
   8038c:	4a11      	ldr	r2, [pc, #68]	; (803d4 <Reset_Handler+0x4c>)
   8038e:	429a      	cmp	r2, r3
   80390:	d009      	beq.n	803a6 <Reset_Handler+0x1e>
   80392:	4b0f      	ldr	r3, [pc, #60]	; (803d0 <Reset_Handler+0x48>)
   80394:	4a0f      	ldr	r2, [pc, #60]	; (803d4 <Reset_Handler+0x4c>)
   80396:	e003      	b.n	803a0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80398:	6811      	ldr	r1, [r2, #0]
   8039a:	6019      	str	r1, [r3, #0]
   8039c:	3304      	adds	r3, #4
   8039e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   803a0:	490d      	ldr	r1, [pc, #52]	; (803d8 <Reset_Handler+0x50>)
   803a2:	428b      	cmp	r3, r1
   803a4:	d3f8      	bcc.n	80398 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   803a6:	4b0d      	ldr	r3, [pc, #52]	; (803dc <Reset_Handler+0x54>)
   803a8:	e002      	b.n	803b0 <Reset_Handler+0x28>
                *pDest++ = 0;
   803aa:	2200      	movs	r2, #0
   803ac:	601a      	str	r2, [r3, #0]
   803ae:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803b0:	4a0b      	ldr	r2, [pc, #44]	; (803e0 <Reset_Handler+0x58>)
   803b2:	4293      	cmp	r3, r2
   803b4:	d3f9      	bcc.n	803aa <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803b6:	4b0b      	ldr	r3, [pc, #44]	; (803e4 <Reset_Handler+0x5c>)
   803b8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803c0:	4a09      	ldr	r2, [pc, #36]	; (803e8 <Reset_Handler+0x60>)
   803c2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803c4:	4b09      	ldr	r3, [pc, #36]	; (803ec <Reset_Handler+0x64>)
   803c6:	4798      	blx	r3
        main();
   803c8:	4b09      	ldr	r3, [pc, #36]	; (803f0 <Reset_Handler+0x68>)
   803ca:	4798      	blx	r3
   803cc:	e7fe      	b.n	803cc <Reset_Handler+0x44>
   803ce:	bf00      	nop
   803d0:	20000000 	.word	0x20000000
   803d4:	00080c64 	.word	0x00080c64
   803d8:	20000434 	.word	0x20000434
   803dc:	20000434 	.word	0x20000434
   803e0:	200004b8 	.word	0x200004b8
   803e4:	00080000 	.word	0x00080000
   803e8:	e000ed00 	.word	0xe000ed00
   803ec:	00080a05 	.word	0x00080a05
   803f0:	000804cd 	.word	0x000804cd

000803f4 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803f8:	4a20      	ldr	r2, [pc, #128]	; (8047c <SystemInit+0x88>)
   803fa:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   803fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80400:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80402:	4b1f      	ldr	r3, [pc, #124]	; (80480 <SystemInit+0x8c>)
   80404:	6a1b      	ldr	r3, [r3, #32]
   80406:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8040a:	d107      	bne.n	8041c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8040c:	4a1d      	ldr	r2, [pc, #116]	; (80484 <SystemInit+0x90>)
   8040e:	4b1c      	ldr	r3, [pc, #112]	; (80480 <SystemInit+0x8c>)
   80410:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80412:	4b1b      	ldr	r3, [pc, #108]	; (80480 <SystemInit+0x8c>)
   80414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80416:	f013 0f01 	tst.w	r3, #1
   8041a:	d0fa      	beq.n	80412 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8041c:	4a1a      	ldr	r2, [pc, #104]	; (80488 <SystemInit+0x94>)
   8041e:	4b18      	ldr	r3, [pc, #96]	; (80480 <SystemInit+0x8c>)
   80420:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80422:	4b17      	ldr	r3, [pc, #92]	; (80480 <SystemInit+0x8c>)
   80424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80426:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8042a:	d0fa      	beq.n	80422 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8042c:	4a14      	ldr	r2, [pc, #80]	; (80480 <SystemInit+0x8c>)
   8042e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80430:	f023 0303 	bic.w	r3, r3, #3
   80434:	f043 0301 	orr.w	r3, r3, #1
   80438:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8043a:	4b11      	ldr	r3, [pc, #68]	; (80480 <SystemInit+0x8c>)
   8043c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8043e:	f013 0f08 	tst.w	r3, #8
   80442:	d0fa      	beq.n	8043a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80444:	4a11      	ldr	r2, [pc, #68]	; (8048c <SystemInit+0x98>)
   80446:	4b0e      	ldr	r3, [pc, #56]	; (80480 <SystemInit+0x8c>)
   80448:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8044a:	4b0d      	ldr	r3, [pc, #52]	; (80480 <SystemInit+0x8c>)
   8044c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8044e:	f013 0f02 	tst.w	r3, #2
   80452:	d0fa      	beq.n	8044a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80454:	2211      	movs	r2, #17
   80456:	4b0a      	ldr	r3, [pc, #40]	; (80480 <SystemInit+0x8c>)
   80458:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8045a:	4b09      	ldr	r3, [pc, #36]	; (80480 <SystemInit+0x8c>)
   8045c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8045e:	f013 0f08 	tst.w	r3, #8
   80462:	d0fa      	beq.n	8045a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80464:	2212      	movs	r2, #18
   80466:	4b06      	ldr	r3, [pc, #24]	; (80480 <SystemInit+0x8c>)
   80468:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8046a:	4b05      	ldr	r3, [pc, #20]	; (80480 <SystemInit+0x8c>)
   8046c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8046e:	f013 0f08 	tst.w	r3, #8
   80472:	d0fa      	beq.n	8046a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80474:	4a06      	ldr	r2, [pc, #24]	; (80490 <SystemInit+0x9c>)
   80476:	4b07      	ldr	r3, [pc, #28]	; (80494 <SystemInit+0xa0>)
   80478:	601a      	str	r2, [r3, #0]
   8047a:	4770      	bx	lr
   8047c:	400e0a00 	.word	0x400e0a00
   80480:	400e0600 	.word	0x400e0600
   80484:	00370809 	.word	0x00370809
   80488:	01370809 	.word	0x01370809
   8048c:	200d3f01 	.word	0x200d3f01
   80490:	0501bd00 	.word	0x0501bd00
   80494:	20000000 	.word	0x20000000

00080498 <Game_Score_Keeper>:





void Game_Score_Keeper(int* game_score, int* score_flag){
   80498:	b538      	push	{r3, r4, r5, lr}
   8049a:	460c      	mov	r4, r1
	if(*score_flag == 0){
   8049c:	680b      	ldr	r3, [r1, #0]
   8049e:	b13b      	cbz	r3, 804b0 <Game_Score_Keeper+0x18>
		if(ADC_read() < GOAL_TRESHOLD){
			*game_score -= 1;
			*score_flag = 1;
		}
	}
	if(ADC_read()>GOAL_TRESHOLD){
   804a0:	4b09      	ldr	r3, [pc, #36]	; (804c8 <Game_Score_Keeper+0x30>)
   804a2:	4798      	blx	r3
   804a4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   804a8:	d901      	bls.n	804ae <Game_Score_Keeper+0x16>
		*score_flag = 0;
   804aa:	2300      	movs	r3, #0
   804ac:	6023      	str	r3, [r4, #0]
   804ae:	bd38      	pop	{r3, r4, r5, pc}
   804b0:	4605      	mov	r5, r0
		if(ADC_read() < GOAL_TRESHOLD){
   804b2:	4b05      	ldr	r3, [pc, #20]	; (804c8 <Game_Score_Keeper+0x30>)
   804b4:	4798      	blx	r3
   804b6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   804ba:	d2f1      	bcs.n	804a0 <Game_Score_Keeper+0x8>
			*game_score -= 1;
   804bc:	682b      	ldr	r3, [r5, #0]
   804be:	3b01      	subs	r3, #1
   804c0:	602b      	str	r3, [r5, #0]
			*score_flag = 1;
   804c2:	2301      	movs	r3, #1
   804c4:	6023      	str	r3, [r4, #0]
   804c6:	e7eb      	b.n	804a0 <Game_Score_Keeper+0x8>
   804c8:	00080191 	.word	0x00080191

000804cc <main>:
#include "PWM_driver.h"



int main(void)
{
   804cc:	b500      	push	{lr}
   804ce:	b087      	sub	sp, #28
    /* Initialize the SAM system */
    SystemInit();
   804d0:	4b1d      	ldr	r3, [pc, #116]	; (80548 <main+0x7c>)
   804d2:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;	//Disables watchdog-timer
   804d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804d8:	4b1c      	ldr	r3, [pc, #112]	; (8054c <main+0x80>)
   804da:	605a      	str	r2, [r3, #4]
	configure_uart();
   804dc:	4b1c      	ldr	r3, [pc, #112]	; (80550 <main+0x84>)
   804de:	4798      	blx	r3
	
	can_init_def_tx_rx_mb(CAN_BR_values);
   804e0:	481c      	ldr	r0, [pc, #112]	; (80554 <main+0x88>)
   804e2:	4b1d      	ldr	r3, [pc, #116]	; (80558 <main+0x8c>)
   804e4:	4798      	blx	r3
	ADC_init();
   804e6:	4b1d      	ldr	r3, [pc, #116]	; (8055c <main+0x90>)
   804e8:	4798      	blx	r3
	PWM_init();
   804ea:	4b1d      	ldr	r3, [pc, #116]	; (80560 <main+0x94>)
   804ec:	4798      	blx	r3
	
	//PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK;
	//PMC->PMC_PCER0 = PMC_PCER0_PID11;
	
	PIOA->PIO_PER = (1 << 19)|(1 << 20);
   804ee:	4b1d      	ldr	r3, [pc, #116]	; (80564 <main+0x98>)
   804f0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   804f4:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER = (1 << 19)|(1 << 20);
   804f6:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_SODR = (1 << 19)|(1 << 20);
   804f8:	631a      	str	r2, [r3, #48]	; 0x30
	
    /* Replace with your application code */
	CAN_MESSAGE test_msg;
	
	
	int game_lives = 10;
   804fa:	230a      	movs	r3, #10
   804fc:	9302      	str	r3, [sp, #8]
	int score_flags = 0;
   804fe:	2300      	movs	r3, #0
   80500:	9301      	str	r3, [sp, #4]
   80502:	e013      	b.n	8052c <main+0x60>
		//printf("Message Data0: %x\r\n", test_msg.data[0]);
	}else{
		printf("Funkar inte %c\r\n",' ');
		}

	PWM_DC_from_joystick(test_msg.data[0]);
   80504:	f89d 000f 	ldrb.w	r0, [sp, #15]
   80508:	4b17      	ldr	r3, [pc, #92]	; (80568 <main+0x9c>)
   8050a:	4798      	blx	r3
	
	Game_Score_Keeper(&game_lives, &score_flags);
   8050c:	a901      	add	r1, sp, #4
   8050e:	a802      	add	r0, sp, #8
   80510:	4b16      	ldr	r3, [pc, #88]	; (8056c <main+0xa0>)
   80512:	4798      	blx	r3
	printf("Game Lives: %d \r\n", game_lives);
   80514:	9902      	ldr	r1, [sp, #8]
   80516:	4816      	ldr	r0, [pc, #88]	; (80570 <main+0xa4>)
   80518:	4c16      	ldr	r4, [pc, #88]	; (80574 <main+0xa8>)
   8051a:	47a0      	blx	r4
	
	
	
	printf("ADC VALUE: %u\r\n", ADC_read());
   8051c:	4b16      	ldr	r3, [pc, #88]	; (80578 <main+0xac>)
   8051e:	4798      	blx	r3
   80520:	4601      	mov	r1, r0
   80522:	4816      	ldr	r0, [pc, #88]	; (8057c <main+0xb0>)
   80524:	47a0      	blx	r4
	
	printf("------------------%c\r\n", ' ');
   80526:	2120      	movs	r1, #32
   80528:	4815      	ldr	r0, [pc, #84]	; (80580 <main+0xb4>)
   8052a:	47a0      	blx	r4
	can_receive(&test_msg, 0);
   8052c:	2100      	movs	r1, #0
   8052e:	a803      	add	r0, sp, #12
   80530:	4b14      	ldr	r3, [pc, #80]	; (80584 <main+0xb8>)
   80532:	4798      	blx	r3
	if (test_msg.id == '$'){ //lesing av posisjon over CAN
   80534:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   80538:	2b24      	cmp	r3, #36	; 0x24
   8053a:	d0e3      	beq.n	80504 <main+0x38>
		printf("Funkar inte %c\r\n",' ');
   8053c:	2120      	movs	r1, #32
   8053e:	4812      	ldr	r0, [pc, #72]	; (80588 <main+0xbc>)
   80540:	4b0c      	ldr	r3, [pc, #48]	; (80574 <main+0xa8>)
   80542:	4798      	blx	r3
   80544:	e7de      	b.n	80504 <main+0x38>
   80546:	bf00      	nop
   80548:	000803f5 	.word	0x000803f5
   8054c:	400e1a50 	.word	0x400e1a50
   80550:	00080911 	.word	0x00080911
   80554:	00290165 	.word	0x00290165
   80558:	00080281 	.word	0x00080281
   8055c:	00080161 	.word	0x00080161
   80560:	00080869 	.word	0x00080869
   80564:	400e0e00 	.word	0x400e0e00
   80568:	000808cd 	.word	0x000808cd
   8056c:	00080499 	.word	0x00080499
   80570:	00080bb4 	.word	0x00080bb4
   80574:	0008081d 	.word	0x0008081d
   80578:	00080191 	.word	0x00080191
   8057c:	00080bc8 	.word	0x00080bc8
   80580:	00080bd8 	.word	0x00080bd8
   80584:	00080291 	.word	0x00080291
   80588:	00080ba0 	.word	0x00080ba0

0008058c <printchar>:
//#include "printf_stdarg.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   8058c:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8058e:	b2c8      	uxtb	r0, r1
   80590:	4b01      	ldr	r3, [pc, #4]	; (80598 <printchar+0xc>)
   80592:	4798      	blx	r3
   80594:	bd08      	pop	{r3, pc}
   80596:	bf00      	nop
   80598:	00080979 	.word	0x00080979

0008059c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   8059c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805a0:	4607      	mov	r7, r0
   805a2:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   805a4:	1e15      	subs	r5, r2, #0
   805a6:	dd02      	ble.n	805ae <prints+0x12>
   805a8:	460a      	mov	r2, r1
   805aa:	2100      	movs	r1, #0
   805ac:	e004      	b.n	805b8 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   805ae:	f04f 0820 	mov.w	r8, #32
   805b2:	e00e      	b.n	805d2 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   805b4:	3101      	adds	r1, #1
   805b6:	3201      	adds	r2, #1
   805b8:	7810      	ldrb	r0, [r2, #0]
   805ba:	2800      	cmp	r0, #0
   805bc:	d1fa      	bne.n	805b4 <prints+0x18>
		if (len >= width) width = 0;
   805be:	42a9      	cmp	r1, r5
   805c0:	da01      	bge.n	805c6 <prints+0x2a>
		else width -= len;
   805c2:	1a6d      	subs	r5, r5, r1
   805c4:	e000      	b.n	805c8 <prints+0x2c>
		if (len >= width) width = 0;
   805c6:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   805c8:	f013 0f02 	tst.w	r3, #2
   805cc:	d106      	bne.n	805dc <prints+0x40>
	register int pc = 0, padchar = ' ';
   805ce:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   805d2:	f013 0401 	ands.w	r4, r3, #1
   805d6:	d00a      	beq.n	805ee <prints+0x52>
	register int pc = 0, padchar = ' ';
   805d8:	2400      	movs	r4, #0
   805da:	e010      	b.n	805fe <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   805dc:	f04f 0830 	mov.w	r8, #48	; 0x30
   805e0:	e7f7      	b.n	805d2 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   805e2:	4641      	mov	r1, r8
   805e4:	4638      	mov	r0, r7
   805e6:	4b0d      	ldr	r3, [pc, #52]	; (8061c <prints+0x80>)
   805e8:	4798      	blx	r3
			++pc;
   805ea:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   805ec:	3d01      	subs	r5, #1
   805ee:	2d00      	cmp	r5, #0
   805f0:	dcf7      	bgt.n	805e2 <prints+0x46>
   805f2:	e004      	b.n	805fe <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   805f4:	4638      	mov	r0, r7
   805f6:	4b09      	ldr	r3, [pc, #36]	; (8061c <prints+0x80>)
   805f8:	4798      	blx	r3
		++pc;
   805fa:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   805fc:	3601      	adds	r6, #1
   805fe:	7831      	ldrb	r1, [r6, #0]
   80600:	2900      	cmp	r1, #0
   80602:	d1f7      	bne.n	805f4 <prints+0x58>
   80604:	e005      	b.n	80612 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80606:	4641      	mov	r1, r8
   80608:	4638      	mov	r0, r7
   8060a:	4b04      	ldr	r3, [pc, #16]	; (8061c <prints+0x80>)
   8060c:	4798      	blx	r3
		++pc;
   8060e:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80610:	3d01      	subs	r5, #1
   80612:	2d00      	cmp	r5, #0
   80614:	dcf7      	bgt.n	80606 <prints+0x6a>
	}

	return pc;
}
   80616:	4620      	mov	r0, r4
   80618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8061c:	0008058d 	.word	0x0008058d

00080620 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80620:	b5f0      	push	{r4, r5, r6, r7, lr}
   80622:	b085      	sub	sp, #20
   80624:	4607      	mov	r7, r0
   80626:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80628:	b151      	cbz	r1, 80640 <printi+0x20>
   8062a:	461e      	mov	r6, r3
   8062c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8062e:	b113      	cbz	r3, 80636 <printi+0x16>
   80630:	2a0a      	cmp	r2, #10
   80632:	d012      	beq.n	8065a <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80634:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80636:	ad04      	add	r5, sp, #16
   80638:	2300      	movs	r3, #0
   8063a:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   8063e:	e018      	b.n	80672 <printi+0x52>
		print_buf[0] = '0';
   80640:	2330      	movs	r3, #48	; 0x30
   80642:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80646:	2300      	movs	r3, #0
   80648:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8064c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8064e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80650:	a901      	add	r1, sp, #4
   80652:	4638      	mov	r0, r7
   80654:	4c1b      	ldr	r4, [pc, #108]	; (806c4 <printi+0xa4>)
   80656:	47a0      	blx	r4
   80658:	e029      	b.n	806ae <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   8065a:	2900      	cmp	r1, #0
   8065c:	db01      	blt.n	80662 <printi+0x42>
	register int t, neg = 0, pc = 0;
   8065e:	2600      	movs	r6, #0
   80660:	e7e9      	b.n	80636 <printi+0x16>
		u = -i;
   80662:	424c      	negs	r4, r1
		neg = 1;
   80664:	2601      	movs	r6, #1
   80666:	e7e6      	b.n	80636 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80668:	3330      	adds	r3, #48	; 0x30
   8066a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   8066e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80672:	b14c      	cbz	r4, 80688 <printi+0x68>
		t = u % b;
   80674:	fbb4 f3f2 	udiv	r3, r4, r2
   80678:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   8067c:	2b09      	cmp	r3, #9
   8067e:	ddf3      	ble.n	80668 <printi+0x48>
			t += letbase - '0' - 10;
   80680:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80684:	440b      	add	r3, r1
   80686:	e7ef      	b.n	80668 <printi+0x48>
	}

	if (neg) {
   80688:	b156      	cbz	r6, 806a0 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   8068a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8068c:	b11b      	cbz	r3, 80696 <printi+0x76>
   8068e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80690:	f013 0f02 	tst.w	r3, #2
   80694:	d10d      	bne.n	806b2 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80696:	232d      	movs	r3, #45	; 0x2d
   80698:	f805 3c01 	strb.w	r3, [r5, #-1]
   8069c:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   8069e:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   806a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806a4:	4629      	mov	r1, r5
   806a6:	4638      	mov	r0, r7
   806a8:	4c06      	ldr	r4, [pc, #24]	; (806c4 <printi+0xa4>)
   806aa:	47a0      	blx	r4
   806ac:	4430      	add	r0, r6
}
   806ae:	b005      	add	sp, #20
   806b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   806b2:	212d      	movs	r1, #45	; 0x2d
   806b4:	4638      	mov	r0, r7
   806b6:	4b04      	ldr	r3, [pc, #16]	; (806c8 <printi+0xa8>)
   806b8:	4798      	blx	r3
			--width;
   806ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806bc:	3b01      	subs	r3, #1
   806be:	930a      	str	r3, [sp, #40]	; 0x28
   806c0:	e7ee      	b.n	806a0 <printi+0x80>
   806c2:	bf00      	nop
   806c4:	0008059d 	.word	0x0008059d
   806c8:	0008058d 	.word	0x0008058d

000806cc <print>:

static int print( char **out, const char *format, va_list args )
{
   806cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   806ce:	b089      	sub	sp, #36	; 0x24
   806d0:	4606      	mov	r6, r0
   806d2:	460c      	mov	r4, r1
   806d4:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   806d6:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   806d8:	e081      	b.n	807de <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   806da:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   806dc:	2301      	movs	r3, #1
   806de:	e08b      	b.n	807f8 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   806e0:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   806e2:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   806e6:	7822      	ldrb	r2, [r4, #0]
   806e8:	2a30      	cmp	r2, #48	; 0x30
   806ea:	d0f9      	beq.n	806e0 <print+0x14>
   806ec:	2200      	movs	r2, #0
   806ee:	e006      	b.n	806fe <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   806f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   806f4:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   806f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   806fa:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   806fc:	3401      	adds	r4, #1
   806fe:	7821      	ldrb	r1, [r4, #0]
   80700:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80704:	b2c0      	uxtb	r0, r0
   80706:	2809      	cmp	r0, #9
   80708:	d9f2      	bls.n	806f0 <print+0x24>
			}
			if( *format == 's' ) {
   8070a:	2973      	cmp	r1, #115	; 0x73
   8070c:	d018      	beq.n	80740 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   8070e:	2964      	cmp	r1, #100	; 0x64
   80710:	d022      	beq.n	80758 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80712:	2978      	cmp	r1, #120	; 0x78
   80714:	d02f      	beq.n	80776 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80716:	2958      	cmp	r1, #88	; 0x58
   80718:	d03c      	beq.n	80794 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   8071a:	2975      	cmp	r1, #117	; 0x75
   8071c:	d049      	beq.n	807b2 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   8071e:	2963      	cmp	r1, #99	; 0x63
   80720:	d15c      	bne.n	807dc <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80722:	9905      	ldr	r1, [sp, #20]
   80724:	1d08      	adds	r0, r1, #4
   80726:	9005      	str	r0, [sp, #20]
   80728:	7809      	ldrb	r1, [r1, #0]
   8072a:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   8072e:	2100      	movs	r1, #0
   80730:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80734:	a907      	add	r1, sp, #28
   80736:	4630      	mov	r0, r6
   80738:	4f34      	ldr	r7, [pc, #208]	; (8080c <print+0x140>)
   8073a:	47b8      	blx	r7
   8073c:	4405      	add	r5, r0
				continue;
   8073e:	e04d      	b.n	807dc <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80740:	9905      	ldr	r1, [sp, #20]
   80742:	1d08      	adds	r0, r1, #4
   80744:	9005      	str	r0, [sp, #20]
   80746:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80748:	b121      	cbz	r1, 80754 <print+0x88>
   8074a:	4630      	mov	r0, r6
   8074c:	4f2f      	ldr	r7, [pc, #188]	; (8080c <print+0x140>)
   8074e:	47b8      	blx	r7
   80750:	4405      	add	r5, r0
				continue;
   80752:	e043      	b.n	807dc <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80754:	492e      	ldr	r1, [pc, #184]	; (80810 <print+0x144>)
   80756:	e7f8      	b.n	8074a <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80758:	9905      	ldr	r1, [sp, #20]
   8075a:	1d08      	adds	r0, r1, #4
   8075c:	9005      	str	r0, [sp, #20]
   8075e:	6809      	ldr	r1, [r1, #0]
   80760:	2061      	movs	r0, #97	; 0x61
   80762:	9002      	str	r0, [sp, #8]
   80764:	9301      	str	r3, [sp, #4]
   80766:	9200      	str	r2, [sp, #0]
   80768:	2301      	movs	r3, #1
   8076a:	220a      	movs	r2, #10
   8076c:	4630      	mov	r0, r6
   8076e:	4f29      	ldr	r7, [pc, #164]	; (80814 <print+0x148>)
   80770:	47b8      	blx	r7
   80772:	4405      	add	r5, r0
				continue;
   80774:	e032      	b.n	807dc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80776:	9905      	ldr	r1, [sp, #20]
   80778:	1d08      	adds	r0, r1, #4
   8077a:	9005      	str	r0, [sp, #20]
   8077c:	6809      	ldr	r1, [r1, #0]
   8077e:	2061      	movs	r0, #97	; 0x61
   80780:	9002      	str	r0, [sp, #8]
   80782:	9301      	str	r3, [sp, #4]
   80784:	9200      	str	r2, [sp, #0]
   80786:	2300      	movs	r3, #0
   80788:	2210      	movs	r2, #16
   8078a:	4630      	mov	r0, r6
   8078c:	4f21      	ldr	r7, [pc, #132]	; (80814 <print+0x148>)
   8078e:	47b8      	blx	r7
   80790:	4405      	add	r5, r0
				continue;
   80792:	e023      	b.n	807dc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80794:	9905      	ldr	r1, [sp, #20]
   80796:	1d08      	adds	r0, r1, #4
   80798:	9005      	str	r0, [sp, #20]
   8079a:	6809      	ldr	r1, [r1, #0]
   8079c:	2041      	movs	r0, #65	; 0x41
   8079e:	9002      	str	r0, [sp, #8]
   807a0:	9301      	str	r3, [sp, #4]
   807a2:	9200      	str	r2, [sp, #0]
   807a4:	2300      	movs	r3, #0
   807a6:	2210      	movs	r2, #16
   807a8:	4630      	mov	r0, r6
   807aa:	4f1a      	ldr	r7, [pc, #104]	; (80814 <print+0x148>)
   807ac:	47b8      	blx	r7
   807ae:	4405      	add	r5, r0
				continue;
   807b0:	e014      	b.n	807dc <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   807b2:	9905      	ldr	r1, [sp, #20]
   807b4:	1d08      	adds	r0, r1, #4
   807b6:	9005      	str	r0, [sp, #20]
   807b8:	6809      	ldr	r1, [r1, #0]
   807ba:	2061      	movs	r0, #97	; 0x61
   807bc:	9002      	str	r0, [sp, #8]
   807be:	9301      	str	r3, [sp, #4]
   807c0:	9200      	str	r2, [sp, #0]
   807c2:	2300      	movs	r3, #0
   807c4:	220a      	movs	r2, #10
   807c6:	4630      	mov	r0, r6
   807c8:	4f12      	ldr	r7, [pc, #72]	; (80814 <print+0x148>)
   807ca:	47b8      	blx	r7
   807cc:	4405      	add	r5, r0
				continue;
   807ce:	e005      	b.n	807dc <print+0x110>
			++format;
   807d0:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   807d2:	7821      	ldrb	r1, [r4, #0]
   807d4:	4630      	mov	r0, r6
   807d6:	4b10      	ldr	r3, [pc, #64]	; (80818 <print+0x14c>)
   807d8:	4798      	blx	r3
			++pc;
   807da:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   807dc:	3401      	adds	r4, #1
   807de:	7823      	ldrb	r3, [r4, #0]
   807e0:	b163      	cbz	r3, 807fc <print+0x130>
		if (*format == '%') {
   807e2:	2b25      	cmp	r3, #37	; 0x25
   807e4:	d1f5      	bne.n	807d2 <print+0x106>
			++format;
   807e6:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   807e8:	7863      	ldrb	r3, [r4, #1]
   807ea:	b13b      	cbz	r3, 807fc <print+0x130>
			if (*format == '%') goto out;
   807ec:	2b25      	cmp	r3, #37	; 0x25
   807ee:	d0ef      	beq.n	807d0 <print+0x104>
			if (*format == '-') {
   807f0:	2b2d      	cmp	r3, #45	; 0x2d
   807f2:	f43f af72 	beq.w	806da <print+0xe>
			width = pad = 0;
   807f6:	2300      	movs	r3, #0
   807f8:	4614      	mov	r4, r2
   807fa:	e774      	b.n	806e6 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   807fc:	b116      	cbz	r6, 80804 <print+0x138>
   807fe:	6833      	ldr	r3, [r6, #0]
   80800:	2200      	movs	r2, #0
   80802:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80804:	4628      	mov	r0, r5
   80806:	b009      	add	sp, #36	; 0x24
   80808:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8080a:	bf00      	nop
   8080c:	0008059d 	.word	0x0008059d
   80810:	00080bf0 	.word	0x00080bf0
   80814:	00080621 	.word	0x00080621
   80818:	0008058d 	.word	0x0008058d

0008081c <printf>:

int printf(const char *format, ...)
{
   8081c:	b40f      	push	{r0, r1, r2, r3}
   8081e:	b500      	push	{lr}
   80820:	b083      	sub	sp, #12
   80822:	aa04      	add	r2, sp, #16
   80824:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80828:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   8082a:	2000      	movs	r0, #0
   8082c:	4b03      	ldr	r3, [pc, #12]	; (8083c <printf+0x20>)
   8082e:	4798      	blx	r3
}
   80830:	b003      	add	sp, #12
   80832:	f85d eb04 	ldr.w	lr, [sp], #4
   80836:	b004      	add	sp, #16
   80838:	4770      	bx	lr
   8083a:	bf00      	nop
   8083c:	000806cd 	.word	0x000806cd

00080840 <PWM_duty_cycle_update>:
	
	PWM_duty_cycle_update(122);
}

void PWM_duty_cycle_update(int CDTYUPD){
	if (CDTYUPD < (DC_Value_Min)){
   80840:	284f      	cmp	r0, #79	; 0x4f
   80842:	dd05      	ble.n	80850 <PWM_duty_cycle_update+0x10>
		PWM->PWM_CH_NUM[ch].PWM_CDTY = DC_Value_Min;
	}else if(CDTYUPD > DC_Value_Max){
   80844:	28a5      	cmp	r0, #165	; 0xa5
   80846:	dc08      	bgt.n	8085a <PWM_duty_cycle_update+0x1a>
		PWM->PWM_CH_NUM[ch].PWM_CDTY = DC_Value_Max;
	}else{
		PWM->PWM_CH_NUM[ch].PWM_CDTY = CDTYUPD;
   80848:	4b06      	ldr	r3, [pc, #24]	; (80864 <PWM_duty_cycle_update+0x24>)
   8084a:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   8084e:	4770      	bx	lr
		PWM->PWM_CH_NUM[ch].PWM_CDTY = DC_Value_Min;
   80850:	2250      	movs	r2, #80	; 0x50
   80852:	4b04      	ldr	r3, [pc, #16]	; (80864 <PWM_duty_cycle_update+0x24>)
   80854:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80858:	4770      	bx	lr
		PWM->PWM_CH_NUM[ch].PWM_CDTY = DC_Value_Max;
   8085a:	22a5      	movs	r2, #165	; 0xa5
   8085c:	4b01      	ldr	r3, [pc, #4]	; (80864 <PWM_duty_cycle_update+0x24>)
   8085e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80862:	4770      	bx	lr
   80864:	40094000 	.word	0x40094000

00080868 <PWM_init>:
void PWM_init(void){
   80868:	b508      	push	{r3, lr}
	PWM->PWM_ENA = PWM_ENA_CHID5;		// Enable PWM channel 5.
   8086a:	4b14      	ldr	r3, [pc, #80]	; (808bc <PWM_init+0x54>)
   8086c:	2220      	movs	r2, #32
   8086e:	605a      	str	r2, [r3, #4]
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;	// Peripheral Clock Enable, 0 eller 1?
   80870:	4913      	ldr	r1, [pc, #76]	; (808c0 <PWM_init+0x58>)
   80872:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80876:	f042 0210 	orr.w	r2, r2, #16
   8087a:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	PIOC->PIO_PDR |= PIO_PDR_P19;		// Disable Register
   8087e:	4a11      	ldr	r2, [pc, #68]	; (808c4 <PWM_init+0x5c>)
   80880:	6850      	ldr	r0, [r2, #4]
   80882:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   80886:	6050      	str	r0, [r2, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;		// Peripheral Select
   80888:	6f10      	ldr	r0, [r2, #112]	; 0x70
   8088a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   8088e:	6710      	str	r0, [r2, #112]	; 0x70
	PMC->PMC_PCR = PMC_PCR_EN;	
   80890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80894:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
	PWM->PWM_CLK |= PWM_CLK_DIVA(1);	// No dividing	
   80898:	681a      	ldr	r2, [r3, #0]
   8089a:	f042 0201 	orr.w	r2, r2, #1
   8089e:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK |= PWM_CLK_PREA(0);	// CLK = MCK
   808a0:	681a      	ldr	r2, [r3, #0]
   808a2:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[ch].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;
   808a4:	f240 220a 	movw	r2, #522	; 0x20a
   808a8:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[ch].PWM_CPRD = CPRD; 
   808ac:	f240 6269 	movw	r2, #1641	; 0x669
   808b0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM_duty_cycle_update(122);
   808b4:	207a      	movs	r0, #122	; 0x7a
   808b6:	4b04      	ldr	r3, [pc, #16]	; (808c8 <PWM_init+0x60>)
   808b8:	4798      	blx	r3
   808ba:	bd08      	pop	{r3, pc}
   808bc:	40094000 	.word	0x40094000
   808c0:	400e0600 	.word	0x400e0600
   808c4:	400e1200 	.word	0x400e1200
   808c8:	00080841 	.word	0x00080841

000808cc <PWM_DC_from_joystick>:
	}
}

void PWM_DC_from_joystick(uint8_t x_percentage){
   808cc:	b538      	push	{r3, r4, r5, lr}
   808ce:	4604      	mov	r4, r0
	printf("X-PERCENTAGE: %u\r\n", x_percentage);
   808d0:	4601      	mov	r1, r0
   808d2:	480a      	ldr	r0, [pc, #40]	; (808fc <PWM_DC_from_joystick+0x30>)
   808d4:	4d0a      	ldr	r5, [pc, #40]	; (80900 <PWM_DC_from_joystick+0x34>)
   808d6:	47a8      	blx	r5
	int CDTYUPD = (DC_Value_Min + ((x_percentage)*(DC_Value_Max-DC_Value_Min))/100);
   808d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   808dc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
   808e0:	4b08      	ldr	r3, [pc, #32]	; (80904 <PWM_DC_from_joystick+0x38>)
   808e2:	fb83 2304 	smull	r2, r3, r3, r4
   808e6:	17e4      	asrs	r4, r4, #31
   808e8:	ebc4 1463 	rsb	r4, r4, r3, asr #5
   808ec:	3450      	adds	r4, #80	; 0x50
	PWM_duty_cycle_update(CDTYUPD);
   808ee:	4620      	mov	r0, r4
   808f0:	4b05      	ldr	r3, [pc, #20]	; (80908 <PWM_DC_from_joystick+0x3c>)
   808f2:	4798      	blx	r3
	printf("CDTYUPD: %u\r\n", CDTYUPD);
   808f4:	4621      	mov	r1, r4
   808f6:	4805      	ldr	r0, [pc, #20]	; (8090c <PWM_DC_from_joystick+0x40>)
   808f8:	47a8      	blx	r5
   808fa:	bd38      	pop	{r3, r4, r5, pc}
   808fc:	00080bf8 	.word	0x00080bf8
   80900:	0008081d 	.word	0x0008081d
   80904:	51eb851f 	.word	0x51eb851f
   80908:	00080841 	.word	0x00080841
   8090c:	00080c0c 	.word	0x00080c0c

00080910 <configure_uart>:
 */
void configure_uart(void){
	uint32_t ul_sr;

	//Initialize UART ring buffer as empty
	rx_buffer.head=0;
   80910:	4b16      	ldr	r3, [pc, #88]	; (8096c <configure_uart+0x5c>)
   80912:	2200      	movs	r2, #0
   80914:	701a      	strb	r2, [r3, #0]
	rx_buffer.tail=0;
   80916:	705a      	strb	r2, [r3, #1]

	//Initialize UART communication
		// Pin configuration
		// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
		PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80918:	4b15      	ldr	r3, [pc, #84]	; (80970 <configure_uart+0x60>)
   8091a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8091e:	6459      	str	r1, [r3, #68]	; 0x44

		// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
		PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80920:	6059      	str	r1, [r3, #4]

		// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
		ul_sr = PIOA->PIO_ABSR;
   80922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80924:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80926:	4002      	ands	r2, r0
   80928:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   8092c:	671a      	str	r2, [r3, #112]	; 0x70

		// Enable pull up resistor on URXD and UTXD pin
		PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8092e:	6659      	str	r1, [r3, #100]	; 0x64

		// Uart configuration
	
		// Enable the peripheral UART controller in Power Management Controller (PMC)
		PMC->PMC_PCER0 = 1 << ID_UART;
   80930:	f44f 7280 	mov.w	r2, #256	; 0x100
   80934:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80938:	611a      	str	r2, [r3, #16]

		// Reset and disable receiver and transmitter
		UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   8093a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8093e:	21ac      	movs	r1, #172	; 0xac
   80940:	6019      	str	r1, [r3, #0]

		// Set the baudrate
		UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80942:	f240 2123 	movw	r1, #547	; 0x223
   80946:	6219      	str	r1, [r3, #32]

		// No parity bits
		UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80948:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8094c:	6059      	str	r1, [r3, #4]

		// Disable PDC channel
		UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8094e:	f240 2102 	movw	r1, #514	; 0x202
   80952:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

		// Configure interrupts on receive ready and errors
		UART->UART_IDR = 0xFFFFFFFF;
   80956:	f04f 31ff 	mov.w	r1, #4294967295
   8095a:	60d9      	str	r1, [r3, #12]
		UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   8095c:	21e1      	movs	r1, #225	; 0xe1
   8095e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80960:	4904      	ldr	r1, [pc, #16]	; (80974 <configure_uart+0x64>)
   80962:	600a      	str	r2, [r1, #0]

		// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
		NVIC_EnableIRQ((IRQn_Type) ID_UART);

		// Enable UART receiver and transmitter
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80964:	2250      	movs	r2, #80	; 0x50
   80966:	601a      	str	r2, [r3, #0]
   80968:	4770      	bx	lr
   8096a:	bf00      	nop
   8096c:	20000450 	.word	0x20000450
   80970:	400e0e00 	.word	0x400e0e00
   80974:	e000e100 	.word	0xe000e100

00080978 <uart_putchar>:
 *
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c){
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80978:	4b07      	ldr	r3, [pc, #28]	; (80998 <uart_putchar+0x20>)
   8097a:	695b      	ldr	r3, [r3, #20]
   8097c:	f013 0f02 	tst.w	r3, #2
   80980:	d008      	beq.n	80994 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80982:	4b05      	ldr	r3, [pc, #20]	; (80998 <uart_putchar+0x20>)
   80984:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80986:	4b04      	ldr	r3, [pc, #16]	; (80998 <uart_putchar+0x20>)
   80988:	695b      	ldr	r3, [r3, #20]
   8098a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8098e:	d0fa      	beq.n	80986 <uart_putchar+0xe>
	return 0;
   80990:	2000      	movs	r0, #0
   80992:	4770      	bx	lr
	return 1;
   80994:	2001      	movs	r0, #1
}
   80996:	4770      	bx	lr
   80998:	400e0800 	.word	0x400e0800

0008099c <UART_Handler>:

void UART_Handler(void){
   8099c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   8099e:	4b15      	ldr	r3, [pc, #84]	; (809f4 <UART_Handler+0x58>)
   809a0:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)){
   809a2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   809a6:	d003      	beq.n	809b0 <UART_Handler+0x14>
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   809a8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   809ac:	4a11      	ldr	r2, [pc, #68]	; (809f4 <UART_Handler+0x58>)
   809ae:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   809b0:	f013 0f01 	tst.w	r3, #1
   809b4:	d012      	beq.n	809dc <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   809b6:	4810      	ldr	r0, [pc, #64]	; (809f8 <UART_Handler+0x5c>)
   809b8:	7842      	ldrb	r2, [r0, #1]
   809ba:	1c53      	adds	r3, r2, #1
   809bc:	4259      	negs	r1, r3
   809be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   809c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   809c6:	bf58      	it	pl
   809c8:	424b      	negpl	r3, r1
   809ca:	7801      	ldrb	r1, [r0, #0]
   809cc:	428b      	cmp	r3, r1
   809ce:	d006      	beq.n	809de <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   809d0:	4908      	ldr	r1, [pc, #32]	; (809f4 <UART_Handler+0x58>)
   809d2:	6988      	ldr	r0, [r1, #24]
   809d4:	4908      	ldr	r1, [pc, #32]	; (809f8 <UART_Handler+0x5c>)
   809d6:	440a      	add	r2, r1
   809d8:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   809da:	704b      	strb	r3, [r1, #1]
   809dc:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   809de:	4807      	ldr	r0, [pc, #28]	; (809fc <UART_Handler+0x60>)
   809e0:	4b07      	ldr	r3, [pc, #28]	; (80a00 <UART_Handler+0x64>)
   809e2:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   809e4:	4b04      	ldr	r3, [pc, #16]	; (809f8 <UART_Handler+0x5c>)
   809e6:	7859      	ldrb	r1, [r3, #1]
   809e8:	4a02      	ldr	r2, [pc, #8]	; (809f4 <UART_Handler+0x58>)
   809ea:	6992      	ldr	r2, [r2, #24]
   809ec:	440b      	add	r3, r1
   809ee:	709a      	strb	r2, [r3, #2]
			return;
   809f0:	bd08      	pop	{r3, pc}
   809f2:	bf00      	nop
   809f4:	400e0800 	.word	0x400e0800
   809f8:	20000450 	.word	0x20000450
   809fc:	00080c1c 	.word	0x00080c1c
   80a00:	0008081d 	.word	0x0008081d

00080a04 <__libc_init_array>:
   80a04:	b570      	push	{r4, r5, r6, lr}
   80a06:	4e0f      	ldr	r6, [pc, #60]	; (80a44 <__libc_init_array+0x40>)
   80a08:	4d0f      	ldr	r5, [pc, #60]	; (80a48 <__libc_init_array+0x44>)
   80a0a:	1b76      	subs	r6, r6, r5
   80a0c:	10b6      	asrs	r6, r6, #2
   80a0e:	bf18      	it	ne
   80a10:	2400      	movne	r4, #0
   80a12:	d005      	beq.n	80a20 <__libc_init_array+0x1c>
   80a14:	3401      	adds	r4, #1
   80a16:	f855 3b04 	ldr.w	r3, [r5], #4
   80a1a:	4798      	blx	r3
   80a1c:	42a6      	cmp	r6, r4
   80a1e:	d1f9      	bne.n	80a14 <__libc_init_array+0x10>
   80a20:	4e0a      	ldr	r6, [pc, #40]	; (80a4c <__libc_init_array+0x48>)
   80a22:	4d0b      	ldr	r5, [pc, #44]	; (80a50 <__libc_init_array+0x4c>)
   80a24:	f000 f90c 	bl	80c40 <_init>
   80a28:	1b76      	subs	r6, r6, r5
   80a2a:	10b6      	asrs	r6, r6, #2
   80a2c:	bf18      	it	ne
   80a2e:	2400      	movne	r4, #0
   80a30:	d006      	beq.n	80a40 <__libc_init_array+0x3c>
   80a32:	3401      	adds	r4, #1
   80a34:	f855 3b04 	ldr.w	r3, [r5], #4
   80a38:	4798      	blx	r3
   80a3a:	42a6      	cmp	r6, r4
   80a3c:	d1f9      	bne.n	80a32 <__libc_init_array+0x2e>
   80a3e:	bd70      	pop	{r4, r5, r6, pc}
   80a40:	bd70      	pop	{r4, r5, r6, pc}
   80a42:	bf00      	nop
   80a44:	00080c4c 	.word	0x00080c4c
   80a48:	00080c4c 	.word	0x00080c4c
   80a4c:	00080c54 	.word	0x00080c54
   80a50:	00080c4c 	.word	0x00080c4c

00080a54 <register_fini>:
   80a54:	4b02      	ldr	r3, [pc, #8]	; (80a60 <register_fini+0xc>)
   80a56:	b113      	cbz	r3, 80a5e <register_fini+0xa>
   80a58:	4802      	ldr	r0, [pc, #8]	; (80a64 <register_fini+0x10>)
   80a5a:	f000 b805 	b.w	80a68 <atexit>
   80a5e:	4770      	bx	lr
   80a60:	00000000 	.word	0x00000000
   80a64:	00080a75 	.word	0x00080a75

00080a68 <atexit>:
   80a68:	2300      	movs	r3, #0
   80a6a:	4601      	mov	r1, r0
   80a6c:	461a      	mov	r2, r3
   80a6e:	4618      	mov	r0, r3
   80a70:	f000 b81e 	b.w	80ab0 <__register_exitproc>

00080a74 <__libc_fini_array>:
   80a74:	b538      	push	{r3, r4, r5, lr}
   80a76:	4c0a      	ldr	r4, [pc, #40]	; (80aa0 <__libc_fini_array+0x2c>)
   80a78:	4d0a      	ldr	r5, [pc, #40]	; (80aa4 <__libc_fini_array+0x30>)
   80a7a:	1b64      	subs	r4, r4, r5
   80a7c:	10a4      	asrs	r4, r4, #2
   80a7e:	d00a      	beq.n	80a96 <__libc_fini_array+0x22>
   80a80:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a84:	3b01      	subs	r3, #1
   80a86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a8a:	3c01      	subs	r4, #1
   80a8c:	f855 3904 	ldr.w	r3, [r5], #-4
   80a90:	4798      	blx	r3
   80a92:	2c00      	cmp	r4, #0
   80a94:	d1f9      	bne.n	80a8a <__libc_fini_array+0x16>
   80a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a9a:	f000 b8db 	b.w	80c54 <_fini>
   80a9e:	bf00      	nop
   80aa0:	00080c64 	.word	0x00080c64
   80aa4:	00080c60 	.word	0x00080c60

00080aa8 <__retarget_lock_acquire_recursive>:
   80aa8:	4770      	bx	lr
   80aaa:	bf00      	nop

00080aac <__retarget_lock_release_recursive>:
   80aac:	4770      	bx	lr
   80aae:	bf00      	nop

00080ab0 <__register_exitproc>:
   80ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80ab4:	4d2c      	ldr	r5, [pc, #176]	; (80b68 <__register_exitproc+0xb8>)
   80ab6:	4606      	mov	r6, r0
   80ab8:	6828      	ldr	r0, [r5, #0]
   80aba:	4698      	mov	r8, r3
   80abc:	460f      	mov	r7, r1
   80abe:	4691      	mov	r9, r2
   80ac0:	f7ff fff2 	bl	80aa8 <__retarget_lock_acquire_recursive>
   80ac4:	4b29      	ldr	r3, [pc, #164]	; (80b6c <__register_exitproc+0xbc>)
   80ac6:	681c      	ldr	r4, [r3, #0]
   80ac8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80acc:	2b00      	cmp	r3, #0
   80ace:	d03e      	beq.n	80b4e <__register_exitproc+0x9e>
   80ad0:	685a      	ldr	r2, [r3, #4]
   80ad2:	2a1f      	cmp	r2, #31
   80ad4:	dc1c      	bgt.n	80b10 <__register_exitproc+0x60>
   80ad6:	f102 0e01 	add.w	lr, r2, #1
   80ada:	b176      	cbz	r6, 80afa <__register_exitproc+0x4a>
   80adc:	2101      	movs	r1, #1
   80ade:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80ae2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80ae6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80aea:	4091      	lsls	r1, r2
   80aec:	4308      	orrs	r0, r1
   80aee:	2e02      	cmp	r6, #2
   80af0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80af4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80af8:	d023      	beq.n	80b42 <__register_exitproc+0x92>
   80afa:	3202      	adds	r2, #2
   80afc:	f8c3 e004 	str.w	lr, [r3, #4]
   80b00:	6828      	ldr	r0, [r5, #0]
   80b02:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80b06:	f7ff ffd1 	bl	80aac <__retarget_lock_release_recursive>
   80b0a:	2000      	movs	r0, #0
   80b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b10:	4b17      	ldr	r3, [pc, #92]	; (80b70 <__register_exitproc+0xc0>)
   80b12:	b30b      	cbz	r3, 80b58 <__register_exitproc+0xa8>
   80b14:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80b18:	f3af 8000 	nop.w
   80b1c:	4603      	mov	r3, r0
   80b1e:	b1d8      	cbz	r0, 80b58 <__register_exitproc+0xa8>
   80b20:	2000      	movs	r0, #0
   80b22:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80b26:	f04f 0e01 	mov.w	lr, #1
   80b2a:	6058      	str	r0, [r3, #4]
   80b2c:	6019      	str	r1, [r3, #0]
   80b2e:	4602      	mov	r2, r0
   80b30:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b34:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b38:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80b3c:	2e00      	cmp	r6, #0
   80b3e:	d0dc      	beq.n	80afa <__register_exitproc+0x4a>
   80b40:	e7cc      	b.n	80adc <__register_exitproc+0x2c>
   80b42:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80b46:	4301      	orrs	r1, r0
   80b48:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80b4c:	e7d5      	b.n	80afa <__register_exitproc+0x4a>
   80b4e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b52:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b56:	e7bb      	b.n	80ad0 <__register_exitproc+0x20>
   80b58:	6828      	ldr	r0, [r5, #0]
   80b5a:	f7ff ffa7 	bl	80aac <__retarget_lock_release_recursive>
   80b5e:	f04f 30ff 	mov.w	r0, #4294967295
   80b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b66:	bf00      	nop
   80b68:	20000430 	.word	0x20000430
   80b6c:	00080c3c 	.word	0x00080c3c
   80b70:	00000000 	.word	0x00000000
   80b74:	304e4143 	.word	0x304e4143
   80b78:	73656d20 	.word	0x73656d20
   80b7c:	65676173 	.word	0x65676173
   80b80:	72726120 	.word	0x72726120
   80b84:	64657669 	.word	0x64657669
   80b88:	206e6920 	.word	0x206e6920
   80b8c:	2d6e6f6e 	.word	0x2d6e6f6e
   80b90:	64657375 	.word	0x64657375
   80b94:	69616d20 	.word	0x69616d20
   80b98:	786f626c 	.word	0x786f626c
   80b9c:	00000d0a 	.word	0x00000d0a
   80ba0:	6b6e7546 	.word	0x6b6e7546
   80ba4:	69207261 	.word	0x69207261
   80ba8:	2065746e 	.word	0x2065746e
   80bac:	0a0d6325 	.word	0x0a0d6325
   80bb0:	00000000 	.word	0x00000000
   80bb4:	656d6147 	.word	0x656d6147
   80bb8:	76694c20 	.word	0x76694c20
   80bbc:	203a7365 	.word	0x203a7365
   80bc0:	0d206425 	.word	0x0d206425
   80bc4:	0000000a 	.word	0x0000000a
   80bc8:	20434441 	.word	0x20434441
   80bcc:	554c4156 	.word	0x554c4156
   80bd0:	25203a45 	.word	0x25203a45
   80bd4:	000a0d75 	.word	0x000a0d75
   80bd8:	2d2d2d2d 	.word	0x2d2d2d2d
   80bdc:	2d2d2d2d 	.word	0x2d2d2d2d
   80be0:	2d2d2d2d 	.word	0x2d2d2d2d
   80be4:	2d2d2d2d 	.word	0x2d2d2d2d
   80be8:	63252d2d 	.word	0x63252d2d
   80bec:	00000a0d 	.word	0x00000a0d
   80bf0:	6c756e28 	.word	0x6c756e28
   80bf4:	0000296c 	.word	0x0000296c
   80bf8:	45502d58 	.word	0x45502d58
   80bfc:	4e454352 	.word	0x4e454352
   80c00:	45474154 	.word	0x45474154
   80c04:	7525203a 	.word	0x7525203a
   80c08:	00000a0d 	.word	0x00000a0d
   80c0c:	59544443 	.word	0x59544443
   80c10:	3a445055 	.word	0x3a445055
   80c14:	0d752520 	.word	0x0d752520
   80c18:	0000000a 	.word	0x0000000a
   80c1c:	3a525245 	.word	0x3a525245
   80c20:	52415520 	.word	0x52415520
   80c24:	58522054 	.word	0x58522054
   80c28:	66756220 	.word	0x66756220
   80c2c:	20726566 	.word	0x20726566
   80c30:	66207369 	.word	0x66207369
   80c34:	0a6c6c75 	.word	0x0a6c6c75
   80c38:	0000000d 	.word	0x0000000d

00080c3c <_global_impure_ptr>:
   80c3c:	20000008                                ... 

00080c40 <_init>:
   80c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c42:	bf00      	nop
   80c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c46:	bc08      	pop	{r3}
   80c48:	469e      	mov	lr, r3
   80c4a:	4770      	bx	lr

00080c4c <__init_array_start>:
   80c4c:	00080a55 	.word	0x00080a55

00080c50 <__frame_dummy_init_array_entry>:
   80c50:	00080119                                ....

00080c54 <_fini>:
   80c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c56:	bf00      	nop
   80c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c5a:	bc08      	pop	{r3}
   80c5c:	469e      	mov	lr, r3
   80c5e:	4770      	bx	lr

00080c60 <__fini_array_start>:
   80c60:	000800f5 	.word	0x000800f5
